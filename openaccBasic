#include <iostream>
#include <cstdlib>
#include <chrono>

#define TILE_WIDTH 16

void basicMatrixMultiplication(float *A, float *B, float *C, int m, int n, int k) {
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < k; ++j) {
            float sum = 0.0f;
            for (int l = 0; l < n; ++l) {
                sum += A[i * n + l] * B[l * k + j];
            }
            C[i * k + j] = sum;
        }
    }
}

int main() {
    int m = 1024;
    int n = 1024;
    int k = 1024;

    float *A = new float[m * n];
    float *B = new float[n * k];
    float *C_basic = new float[m * k];
    float *C_tiled = new float[m * k];

    // Initialize matrices A and B
    for (int i = 0; i < m * n; ++i) {
        A[i] = static_cast<float>(rand()) / static_cast<float>(RAND_MAX);
    }
    for (int i = 0; i < n * k; ++i) {
        B[i] = static_cast<float>(rand()) / static_cast<float>(RAND_MAX);
    }

    // Timing for basic matrix multiplication
    auto start_basic = std::chrono::steady_clock::now();
    basicMatrixMultiplication(A, B, C_basic, m, n, k);
    auto end_basic = std::chrono::steady_clock::now();
    std::chrono::duration<double> elapsed_basic = end_basic - start_basic;
    std::cout << "Basic multiplication time: " << elapsed_basic.count() << " seconds\n";

    // Verify results (optional)
    bool error = false;
    for (int i = 0; i < m * k; ++i) {
        if (C_basic[i] != C_tiled[i]) {
            error = true;
            break;
        }
    }

    if (error) {
        std::cout << "Error: Results mismatch\n";
    } else {
        std::cout << "Results matched\n";
    }

    delete[] A;
    delete[] B;
    delete[] C_basic;
    delete[] C_tiled;

    return 0;
}
