#include <stdio.h>

#define TILE_WIDTH 16

__global__ void matrixMulTiled(float *a, float *b, float *c, int m, int n, int k) {
    __shared__ float s_a[TILE_WIDTH][TILE_WIDTH];
    __shared__ float s_b[TILE_WIDTH][TILE_WIDTH];

    int bx = blockIdx.x;
    int by = blockIdx.y;
    int tx = threadIdx.x;
    int ty = threadIdx.y;

    int Row = by * TILE_WIDTH + ty;
    int Col = bx * TILE_WIDTH + tx;

    float sum = 0.0f;

    for (int mIdx = 0; mIdx < (n + TILE_WIDTH - 1) / TILE_WIDTH; ++mIdx) {
        if (Row < m && mIdx * TILE_WIDTH + tx < n)
            s_a[ty][tx] = a[Row * n + mIdx * TILE_WIDTH + tx];
        else
            s_a[ty][tx] = 0.0f;

        if (Col < k && mIdx * TILE_WIDTH + ty < n)
            s_b[ty][tx] = b[(mIdx * TILE_WIDTH + ty) * k + Col];
        else
            s_b[ty][tx] = 0.0f;

        __syncthreads();

        for (int kIdx = 0; kIdx < TILE_WIDTH; ++kIdx)
            sum += s_a[ty][kIdx] * s_b[kIdx][tx];

        __syncthreads();
    }

    if (Row < m && Col < k)
        c[Row * k + Col] = sum;
}

int main() {
    int m = 1024;
    int n = 1024;
    int k = 1024;

    float *a, *b, *c;
    float *d_a, *d_b, *d_c;

    size_t size_a = m * n * sizeof(float);
    size_t size_b = n * k * sizeof(float);
    size_t size_c = m * k * sizeof(float);

    a = (float*)malloc(size_a);
    b = (float*)malloc(size_b);
    c = (float*)malloc(size_c);

    cudaMalloc(&d_a, size_a);
    cudaMalloc(&d_b, size_b);
    cudaMalloc(&d_c, size_c);

    // Initialize matrices
    // ...

    cudaMemcpy(d_a, a, size_a, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size_b, cudaMemcpyHostToDevice);

    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start);

    dim3 blockDim(TILE_WIDTH, TILE_WIDTH);
    dim3 gridDim((k + TILE_WIDTH - 1) / TILE_WIDTH, (m + TILE_WIDTH - 1) / TILE_WIDTH);

    matrixMulTiled<<<gridDim, blockDim>>>(d_a, d_b, d_c, m, n, k);

    cudaEventRecord(stop);
    cudaEventSynchronize(stop);
    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, start, stop);
    printf("Time taken: %f milliseconds\n", milliseconds);

    cudaMemcpy(c, d_c, size_c, cudaMemcpyDeviceToHost);

    // Free memory
    free(a);
    free(b);
    free(c);
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    return 0;
}
